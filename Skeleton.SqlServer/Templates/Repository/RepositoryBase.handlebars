// generated by a tool
using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using Microsoft.Extensions.Configuration;

namespace {{cs_name DefaultNamespace}}.Data.Repository 
{
    public class RepositoryBase
    {
		protected virtual T GetField<T>(DbDataReader reader, string fieldName)
		{
			if (reader[fieldName] == DBNull.Value)
			{
				return default(T);
			}
			return (T)reader[fieldName];
		}

        protected virtual void SetParameterValue(object? value, SqlCommand cmd, string name, SqlDbType dbType)
        {
            var parameter = cmd.Parameters.AddWithValue(name, value ?? DBNull.Value);
            parameter.SqlDbType = dbType;
        }

		protected virtual void SetSearchParameterValue(object value, SqlCommand cmd, string name)
		{
			// http://bartlettpublishing.com/site/bartpub/blog/3/entry/350
            // http://blog.lostpropertyhq.com/postgres-full-text-search-is-good-enough/
			var searchText = value.ToString();
		    if (searchText.IndexOf(' ') > 0)
            {
                var parts = searchText.Split(' ');
                searchText = "";
                for (int index = 0; index < parts.Length; index++)
                {
                    if (index < parts.Length - 1)
                    {
                        searchText += parts[index] + " & ";
                    }
                    else
                    {
                        searchText += parts[index];
                    }
                }
            }

            searchText += ":*";
			cmd.Parameters.AddWithValue(name, searchText);
		}

		protected SqlConnection CreateConnection(string connectionString)
        {
            var connection = new SqlConnection(connectionString);
            return connection;
        }
    
    {{#if Settings.GenerateSecurityPolicies}}
        protected void SetUserContext(SqlConnection connection, {{Settings.UserIdentity.ClrType}} userId)
        {
            // this can't be done inside of a stored procedure because it messes up the meta-data reading process for stored procs
            using var cmd = new SqlCommand("sp_set_session_context", connection);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.Add("@Key", "user_id");
            cmd.Paramaters.Add("@Value", userId);
            cmd.ExecuteNonQuery();
        }         
    {{/if}}

        protected string BuildConnectionString(IConfiguration configuration)
        {
            return configuration.GetConnectionString("DefaultConnection") + configuration.GetValue<string>("UserPassword") + ";";
        }
        
        protected Exception TranslateException(SqlException ex)
        {
            // TODO - need to find what SQL exceptions are thrown for missing PK, duplicate PK etc
            return new DbException(ex.Message, ex.ErrorCode);
        }
	}
        
    public class DbException : DataException 
    {
        public DbException(string message, int errorCode) : base(message)
        {
            ErrorCode = errorCode;
        }
        
        public int ErrorCode { get; }
    }     
}