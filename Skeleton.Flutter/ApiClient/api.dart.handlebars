// generated by a tool
import 'package:http/http.dart' as http;

{{#each Operations}}
    {{#if UsesModel}}
import '../model/{{snake_case ../Name}}/{{snake_case Name}}model.dart';
    {{/if}}
    {{#each UserProvidedParameters}}
        {{#if IsCustomTypeOrCustomArray}}
import '../model/{{snake_case ../Name}}/{{snake_case ResolvedTypescriptTypeUnderlying}}.dart';
        {{/if}}
    {{/each}}
{{/each}}
{{#each DistinctOperationReturnTypesRelatedToParent}}
import '../model/{{snake_case ../Name}}/{{snake_case Name}}.dart';
{{/each}}
{{#each DistinctOperationReturnTypesRelatedToOther}}
import '../model/{{snake_Case Item2.Name}}/{{snake_case Item1.Name}}.dart';
{{/each}}

class {{ClientApiTypeName}} {

	{{#each ApiOperations}}
	{{#if HasCustomType}}
	Future<{{{DartReturn}}}> {{cml_case BareName}}({{#if ../IsAttachment}}FormData{{else}}{{cs_name CustomType.Name}}{{/if}} model) {
		var uri = 'api/{{kb_case ../Name}}/{{cs_name BareName}}';
		print("calling {{Name}} on " + uri);
		{{#if ../IsAttachment}}
		var result = await postForm<{{TypeScriptReturn}}>(uri, model);
		{{else}}
		var result = await {{ts_fix_http HttpMethod}}<{{TypeScriptReturn}}>(uri, model);
		{{/if}}
		{{#if IsStructuredResult}}
		{{#if ResultHasAnyDateFields}}
		if (result.parsedBody) {
        {{#if SingleResult}}
            let d = result.parsedBody;
        {{else}}
            for (let d of result.parsedBody) {
        {{/if}}
                {{#each SimpleReturnType.Fields}}
                {{#unless IsExcludedFromResults}}
				{{#if IsDateTime}}
				{{#if IsRequired}}
				d.{{cml_case Name}} = fixJsonDate(d.{{cml_case Name}});
				{{else}}
				d.{{cml_case Name}} = fixNullableJsonDate(d.{{cml_case Name}});
				{{/if}}
				{{/if}}
                {{/unless}}
				{{/each}}
            {{#unless SingleResult}} }{{/unless}}
        }
		{{/if}}
		{{/if}}
		return result;
	{{else}}
	Future<{{{DartReturn}}}> {{cml_case BareName}}({{#each UserProvidedParameters}} {{{ResolvedDartType}}} {{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}}) { 
    {{#if ProvideDataByUri}}
        var uri = `api/{{kb_case ../Name}}/{{cs_name BareName}}?{{#each UserProvidedParameters}}{{cml_case Name}}=${({{cml_case Name}})}{{#unless @last}}&{{/unless}}{{/each}}`;
    {{else}}
        var uri = 'api/{{kb_case ../Name}}/{{cs_name BareName}}';
    {{/if}}
		print("calling {{Name}} on " + uri);
    {{#if ProvideDataByUri}}
        var result = await {{ts_fix_http HttpMethod}}<{{TypeScriptReturn}}>(uri);
    {{else}}
        var result = await {{ts_fix_http HttpMethod}}<{{TypeScriptReturn}}>(uri, {{#each UserProvidedParameters}}{{cml_case Name}}{{/each}});
    {{/if}}    
		{{#if IsStructuredResult}}
		{{#if ResultHasAnyDateFields}}
		if (result.parsedBody) {
        {{#if SingleResult}}
            let d = result.parsedBody;
        {{else}}
            for (let d of result.parsedBody) {
        {{/if}}
                {{#each SimpleReturnType.Fields}}
                {{#unless IsExcludedFromResults}}
				{{#if IsDateTime}}
				{{#if IsRequired}}
				d.{{cml_case Name}} = fixJsonDate(d.{{cml_case Name}});
				{{else}}
				d.{{cml_case Name}} = fixNullableJsonDate(d.{{cml_case Name}});
				{{/if}}
				{{/if}}
                {{/unless}}
				{{/each}}
            {{#unless SingleResult}} }{{/unless}}
        }
		{{/if}}
		{{/if}}
		return result;
	{{/if}}
	}

	{{/each}} 

}