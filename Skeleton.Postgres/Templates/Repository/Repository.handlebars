// generated by a tool
using Npgsql;
using System;
using System.Data;
using System.Data.Common;
using NpgsqlTypes;
using {{DomainNamespace}}; 
{{#if HasCustomResultType}}
using {{Namespace}}.Data.Model; 
using {{Namespace}}.Data.Model; 
{{/if}}

namespace {{Namespace}}.Data.Repository 
{
    public partial interface I{{cs_name Type.Name}}Repository 
    {
    {{#each Operations}}
    
        {{{ReturnsWithNullability}}} {{cs_name BareName}}({{#each Parameters}}{{{ResolvedClrType}}} {{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}});
        
        {{#if NoResult}}Task{{else}}Task<{{{ReturnsWithNullability}}}>{{/if}} {{cs_name BareName}}Async({{#each Parameters}}{{{ResolvedClrType}}} {{cml_case Name}}, {{/each}} CancellationToken token);

    {{/each}}        
    }

    public partial class {{cs_name Type.Name}}Repository(NpgsqlDataSource dataSource) : RepositoryBase(dataSource), I{{cs_name Type.Name}}Repository
    {
        {{#each Operations}}

        public {{{ReturnsWithNullability}}} {{cs_name BareName}}({{#each Parameters}}{{{ResolvedClrType}}} {{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            try 
            {
                using (var cn = CreateConnection())
                using (var cmd = new NpgsqlCommand("{{{escape_quotes SqlName}}}", cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
    
                    {{#if HasParameters}}
                    Set{{cs_name BareName}}Parameters(cmd, {{#each Parameters}}{{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}});
                    {{/if}}
    
                    cn.Open();
    
                    {{#if NoResult}}
                    cmd.ExecuteNonQuery();
                    {{else}}
                    {{#if IsSingular}}
                    return ({{{ReturnTypeName}}})cmd.ExecuteScalar();
                    {{else}}
                    using (var reader = cmd.ExecuteReader())
                    {
                        {{#if SingleResult}}
                        return reader.Read() ? Read{{cs_name BareName}}Result(reader) : null;
                        {{else}}
                        var readResults = false;
                        var result = new {{{Returns}}}();
                        while (reader.Read())
                        {
                            var item = Read{{cs_name BareName}}Result(reader);
                            result.Add(item);    
                            readResults = true;
                        }

                        return readResults ? result : null;
                        {{/if}}
                    }	
                    {{/if}}
                    {{/if}}
                }
            }
            catch (NpgsqlException ex)
            {
                var generalException = TranslateException(ex);
                throw generalException;
            }
        }

		public async {{#if NoResult}}Task{{else}}Task<{{{ReturnsWithNullability}}}>{{/if}} {{cs_name BareName}}Async({{#each Parameters}}{{{ResolvedClrType}}} {{cml_case Name}}, {{/each}} CancellationToken token)
        {
            try 
            {
                using (var cn = CreateConnection())
                using (var cmd = new NpgsqlCommand("{{{escape_quotes SqlName}}}", cn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
    
                    {{#if HasParameters}}
                    Set{{cs_name BareName}}Parameters(cmd, {{#each Parameters}}{{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}});
                    {{/if}}
                    await cn.OpenAsync(token);
    
                    {{#if NoResult}}
                    await cmd.ExecuteNonQueryAsync(token);
                    {{else}}
                    {{#if IsSingular}}
                    var result = await cmd.ExecuteScalarAsync(token);
                    return ({{{ReturnTypeName}}})result;
                    {{else}}
                    using (var reader = await cmd.ExecuteReaderAsync(token))
                    {
                    {{#if SingleResult}}
                        return await reader.ReadAsync(token) ? Read{{cs_name BareName}}Result(reader) : null;
                    {{else}}
                        var readResults = false;
                        var result = new {{{Returns}}}();
                        while (await reader.ReadAsync(token))
                        {
                            var item = Read{{cs_name BareName}}Result(reader);
                            result.Add(item);
                            readResults = true;
                        }

                        return readResults ? result : null;
                    {{/if}}
                    }	
                    {{/if}}
                    {{/if}}
                }
            }
            catch (NpgsqlException ex)
            {
                var generalException = TranslateException(ex);
                throw generalException;
            }
        }

        {{#if HasParameters}}
        private void Set{{cs_name BareName}}Parameters(NpgsqlCommand cmd, {{#each Parameters}}{{{ResolvedClrType}}} {{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}})
        {    
			{{#if IsSearch}}
			{{#each Parameters}}
			{{#if IsSecurityUser}}
			cmd.Parameters.AddWithValue("{{Name}}", NpgsqlDbType.{{db_type_to_cs ProviderTypeName}}, {{cml_case Name}});
			{{else}}
			SetSearchParameterValue({{cml_case Name}}, cmd, "{{Name}}");
			{{/if}}
			{{/each}}
			{{else}}
			{{#each Parameters}}
			{{#if IsJson}}
			cmd.Parameters.AddWithValue("{{Name}}", NpgsqlDbType.{{db_type_to_cs ProviderTypeName}}, (object){{cml_case Name}} ?? DBNull.Value);
			{{else}}
                {{#if IsCustomTypeOrCustomArray}}
            cmd.Parameters.Add(new NpgsqlParameter{ParameterName = "{{Name}}", Value = {{cml_case Name}} });
                {{else}}
                    {{#if IsNullable}}
            SetParameterValue({{cml_case Name}}, cmd, "{{Name}}", NpgsqlDbType.{{db_type_to_cs ProviderTypeName}});
                    {{else}}
            cmd.Parameters.AddWithValue("{{Name}}", NpgsqlDbType.{{db_type_to_cs ProviderTypeName}}, {{cml_case Name}});
                    {{/if}}
                {{/if}}
			{{/if}}
			{{/each}}
			{{/if}}
        }
        {{/if}}

        {{#unless NoResult}}
        {{#unless IsSingular}}
        private {{{ReturnTypeName}}} Read{{cs_name BareName}}Result(DbDataReader reader)
        {
			{{#each SimpleReturnType.NonExcludedFields}}
			var {{cml_case Name}} = GetField<{{format_clr_type ClrType}}>(reader, "{{Name}}");
			{{/each}}
            var item = new {{{ReturnTypeName}}}({{#each SimpleReturnType.NonExcludedFields}}{{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}});
            return item;
        }
        {{/unless}}
        {{/unless}}
        {{/each}}
    }

}