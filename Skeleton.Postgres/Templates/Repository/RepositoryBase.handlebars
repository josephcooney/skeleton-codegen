// generated by a tool
using Npgsql;
using NpgsqlTypes;
using System;
using System.Data;
using System.Data.Common;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using Microsoft.Extensions.Configuration;

namespace {{DefaultNamespace}}.Data.Repository 
{
    public class RepositoryBase (NpgsqlDataSource dataSource)
    {
		private static byte[] _keyFileBytes;
		private static object _keyFileSync = new object();

		protected virtual T GetField<T>(DbDataReader reader, string fieldName)
		{
			if (reader[fieldName] == DBNull.Value)
			{
				return default(T);
			}
			return (T)reader[fieldName];
		}

        protected virtual void SetParameterValue(object? value, NpgsqlCommand cmd, string name, NpgsqlDbType dbType)
        {
            var parameter = cmd.Parameters.AddWithValue(name, value ?? DBNull.Value);
            parameter.NpgsqlDbType = dbType;
        }

		protected virtual void SetSearchParameterValue(object value, NpgsqlCommand cmd, string name)
		{
			// http://bartlettpublishing.com/site/bartpub/blog/3/entry/350
            // http://blog.lostpropertyhq.com/postgres-full-text-search-is-good-enough/
			var searchText = value.ToString();
		    if (searchText.IndexOf(' ') > 0)
            {
                var parts = searchText.Split(' ');
                searchText = "";
                for (int index = 0; index < parts.Length; index++)
                {
                    if (index < parts.Length - 1)
                    {
                        searchText += parts[index] + " & ";
                    }
                    else
                    {
                        searchText += parts[index];
                    }
                }
            }

            searchText += ":*";
			cmd.Parameters.AddWithValue(name, searchText);
		}

		protected NpgsqlConnection CreateConnection()
        {
            var connection = dataSource.CreateConnection();
            connection.ProvideClientCertificatesCallback = ClientCertificateValidationCallback;
            connection.UserCertificateValidationCallback = ServerCertificateValidationCallback;
            return connection;
        }

        protected NpgsqlConnection CreateConnection(string connectionString)
        {
            var connection = new NpgsqlConnection(connectionString);
            connection.ProvideClientCertificatesCallback = ClientCertificateValidationCallback;
            connection.UserCertificateValidationCallback = ServerCertificateValidationCallback;
            return connection;
        }

        protected string BuildConnectionString(IConfiguration configuration)
        {
            return configuration.GetConnectionString("DefaultConnection") + configuration.GetValue<string>("UserPassword") + ";";
        }

		public static bool ServerCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslpolicyerrors)
        {
            // blanket accept whatever the server sent
            return true;
        }

        protected Exception TranslateException(NpgsqlException ex)
        {
            if (ex is PostgresException)
            {
                var pgEx = ex as PostgresException;
                if (pgEx.SqlState == "P0001")
                {
                    return new DataException(pgEx.MessageText);
                }
        
                if (pgEx.SqlState == "23505")
                {
                    return new ConstraintException("Cannot add duplicate value");
                }
        
                if (pgEx.SqlState == "23503")
                {
                    var additionalInfo = string.Empty;
        
                    if (!string.IsNullOrEmpty(pgEx.ConstraintName))
                    {
                        additionalInfo = pgEx.ConstraintName.Replace("_fkey", "");
                    }

                    return new MissingPrimaryKeyException($"Related value does not exist. {additionalInfo}");
                }
            }
            return new DbException(ex.Message, ex.ErrorCode);
        }
        
        public static void ClientCertificateValidationCallback(X509CertificateCollection certificates)
        {
			if (_keyFileBytes == null)
			{
				lock(_keyFileSync)
				{
					if (_keyFileBytes == null)
					{
						_keyFileBytes = GetKeyFileBytes();
					}
				}
			}

            var bytes = _keyFileBytes;
            var cert = new X509Certificate2(bytes);
            certificates.Add(cert);
        }

        private static byte[] GetKeyFileBytes()
        {
            var assembly = System.Reflection.Assembly.GetExecutingAssembly();
            using (var stream = assembly.GetManifestResourceStream("{{cs_name DefaultNamespace}}.Data.key.pfx"))
            {
                byte[] buffer = new byte[stream.Length];
                stream.Read(buffer, 0, buffer.Length);
                return buffer;
            }
        }
	}
        
    public class DbException : DataException 
    {
        public DbException(string message, int errorCode) : base(message)
        {
            ErrorCode = errorCode;
        }
        
        public int ErrorCode { get; }
    }      
}