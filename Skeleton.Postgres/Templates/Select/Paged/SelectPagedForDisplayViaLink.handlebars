-- generated by a tool
SET search_path TO {{{escape_sql Namespace}}};

drop function if exists {{FunctionName}};

CREATE OR REPLACE FUNCTION {{FunctionName}} (
{{#each SelectInputFields}}
{{{escape_sql Name}}} {{{escape_sql_name ProviderTypeName}}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}}
{{/each}}
) 
RETURNS SETOF {{{make_db_name Name "display"}}} AS
$$
    DECLARE query_txt text;

    BEGIN

    {{#if Domain.HasUserType}}
        IF (security_user_id_param is not null) THEN
            perform set_config('app.user_id', security_user_id_param::text, true);
        END IF;
    {{/if}}

        IF ({{SortParameter.Name}} is not null and {{SortParameter.Name}} not in ({{#each DisplayAllFields}}{{#if HasDisplayName}}'{{{DisplayName}}}'{{else}}'{{{Name}}}'{{/if}}{{#unless @last}},{{/unless}}{{/each}})) THEN
            RAISE 'Invalid sort: %', {{SortParameter.Name}};
        END IF;

        query_txt = '
        SELECT
            {{#each DisplayAllFields}}
            {{ParentAlias}}.{{{escape_sql Name}}}{{#if HasDisplayName}} AS {{{escape_sql DisplayName}}}{{/if}}{{#unless @last}},{{/unless}}
            {{/each}}
        FROM {{{escape_sql Name}}} {{ShortName}}
        {{#each RelatedFields}}
        LEFT JOIN {{{escape_sql Field.ReferencesType.Name}}} AS {{ParentAlias}} ON {{PrimaryAlias}}.{{{escape_sql Field.Name}}} = {{ParentAlias}}.{{{escape_sql Field.ReferencesTypeField.Name}}} 
        {{/each}}
		LEFT JOIN {{{escape_sql LinkingType.Name}}} AS {{LinkTypeAlias}} ON {{LinkTypeAlias}}.{{{escape_sql LinkingTypeField.Name}}} = {{ShortName}}.{{{escape_sql LinkingTypeField.ReferencesTypeField.Name}}}
        WHERE {{LinkTypeAlias}}.{{{escape_sql LinkTypeOtherField.Name}}} = ${{LinkFieldParameterIndex}}
        {{#if FilterListOperation}}
        AND {{OwnershipExpression}}
            {{#if SoftDelete}}
        AND {{ShortName}}.deleted_date is NULL
            {{/if}}        
        {{else}}
            {{#if SoftDelete}}
        AND {{ShortName}}.deleted_date is NULL
            {{/if}}
        {{/if}}
        ORDER BY ' || coalesce(quote_ident({{SortParameter.Name}}), '{{{escape_sql PrimaryKeyField.Name}}}');

        IF ({{SortDescendingField.Name}} = true) THEN
            query_txt = query_txt || ' DESC ';
        END IF;
        
        query_txt = query_txt || ' LIMIT ${{PageSizeParameterIndex}} OFFSET ${{OffsetIndex}}';

        RETURN QUERY EXECUTE query_txt
        USING {{{escape_sql FunctionName}}}.{{{escape_sql LinkTypeOtherField.Name}}}, {{PageSizeField.Name}}, {{PageSizeField.Name}} * {{PageNumberField.Name}};
    END
$$
  LANGUAGE plpgsql STABLE SECURITY INVOKER
  COST 100;

REVOKE ALL ON FUNCTION {{FunctionName}} ({{#each SelectInputFields}} {{{escape_sql_name ProviderTypeName}}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}} {{/each}}) FROM public;

GRANT EXECUTE ON FUNCTION {{FunctionName}} ({{#each SelectInputFields}} {{{escape_sql_name ProviderTypeName}}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}} {{/each}}) TO web_app_role;

COMMENT ON FUNCTION {{FunctionName}} ({{#each SelectInputFields}} {{{escape_sql_name ProviderTypeName}}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}} {{/each}})
    IS '{"applicationtype":"{{Name}}", "generated":true, "fullName":"{{FunctionName}}", "returnTypeName":"{{Name}}_display"}';
