-- generated by a tool
SET search_path TO {{{escape_sql Namespace}}};

drop function if exists {{{escape_sql FunctionName}}};

CREATE OR REPLACE FUNCTION {{{escape_sql FunctionName}}} (
{{#each SelectInputFields}}
{{{escape_sql Name}}} {{{escape_sql_name ProviderTypeName}}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}}
{{/each}}
)
{{#if HasExcludedFields}}
RETURNS SETOF {{{make_db_name Name "result"}}} AS 
{{else}}
RETURNS SETOF {{{escape_sql Name}}} AS
{{/if}}
$$
    
    BEGIN

    {{#if Domain.HasUserType}}
        IF (security_user_id_param is not null) THEN
            perform set_config('app.user_id', security_user_id_param::text, true);
        END IF;
    {{/if}}

        RETURN QUERY
        SELECT
        {{#if HasExcludedFields}}
            {{#each Fields}}
            {{../ShortName}}.{{{escape_sql Name}}}{{#unless @last}},{{/unless}}
            {{/each}}
        {{else}}
            {{ShortName}}.*
        {{/if}}
        FROM {{{escape_sql Name}}} {{ShortName}}
        {{#if SoftDelete}}
        WHERE deleted_date is NULL
        {{/if}}
        ORDER BY {{ShortName}}.{{{escape_sql PrimaryKeyField.Name}}};

    END
$$
  LANGUAGE plpgsql STABLE SECURITY INVOKER
  COST 100;

{{#if UseDbRoleForSecurity}}
REVOKE ALL ON FUNCTION {{{escape_sql FunctionName}}} ({{#each SelectInputFields}} {{{escape_sql_name ProviderTypeName}}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}} {{/each}}) FROM public;

GRANT EXECUTE ON FUNCTION {{{escape_sql FunctionName}}} ({{#each SelectInputFields}} {{{escape_sql_name ProviderTypeName}}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}} {{/each}}) TO web_app_role;
{{/if}}

COMMENT ON FUNCTION {{{escape_sql FunctionName}}} ({{#each SelectInputFields}} {{{escape_sql_name ProviderTypeName}}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}} {{/each}})
    IS '{"applicationtype":"{{Name}}", "generated":true, "fullName":"{{FunctionName}}"}';
