-- generated by a tool
SET search_path TO {{{escape_sql_keyword Namespace}}};

drop function if exists {{FunctionName}};

CREATE OR REPLACE FUNCTION {{FunctionName}} (
{{#each SelectInputFields}}
{{{escape_sql_keyword Name}}} {{ProviderTypeName}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}}
{{/each}}
)
{{#if HasExcludedFields}}
RETURNS SETOF {{Name}}_result AS 
{{else}}
RETURNS SETOF {{{escape_sql_keyword Name}}} AS
{{/if}}
$$
    
    BEGIN

        IF (security_user_id_param is not null) THEN
		    perform set_config('app.user_id', security_user_id_param::text, true);
        END IF;

        RETURN QUERY
        SELECT
        {{#if HasExcludedFields}}
            {{#each Fields}}
            {{../ShortName}}.{{{escape_sql_keyword Name}}}{{#unless @last}},{{/unless}}
            {{/each}}
        {{else}}
            {{ShortName}}.*
        {{/if}}
        FROM {{{escape_sql_keyword Name}}} {{ShortName}}
        {{#if SoftDelete}}
        WHERE deleted_date is NULL
        {{/if}}
        ORDER BY {{ShortName}}.{{{escape_sql_keyword PrimaryKeyField.Name}}};

    END
$$
  LANGUAGE plpgsql STABLE SECURITY INVOKER
  COST 100;

REVOKE ALL ON FUNCTION {{FunctionName}} ({{#each SelectInputFields}} {{ProviderTypeName}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}} {{/each}}) FROM public;

GRANT EXECUTE ON FUNCTION {{FunctionName}} ({{#each SelectInputFields}} {{ProviderTypeName}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}} {{/each}}) TO web_app_role;

COMMENT ON FUNCTION {{FunctionName}} ({{#each SelectInputFields}} {{ProviderTypeName}}{{#if HasSize}}({{Size}}){{/if}}{{#unless @last}},{{/unless}} {{/each}})
    IS '{"applicationtype":"{{Name}}", "generated":true, "fullName":"{{FunctionName}}"}';
