// generated by a tool
import React, {FunctionComponent, useRef, useEffect, useState} from 'react';

import {ActivityIndicator, FlatList, Alert, Text, View} from 'react-native';
import Information from '../../../controls/Information';
import Error from '../../../controls/Error';

import { {{cs_name Name}} } from '../{{cs_name Name}}';
import { {{UnderlyingType.ClientApiInterfaceName}}, {{UnderlyingType.ClientApiTypeName}}, {{cs_name UnderlyingType.Name}}ApiClientQueryKeys } from '../{{cml_case UnderlyingType.Name}}ApiClient';
import {defaultCacheDuration, queryCall} from '../../../api';
import {{cs_name Name}}ListRendering from './{{cml_case Name}}ListRendering';
import { {{cs_name Name}}ListItem } from './{{cml_case Name}}ListItem';
import {useQuery} from '@tanstack/react-query';
import {useNavigation, useTheme} from '@react-navigation/native';
import {IconSize} from '../../../../App';
import Icon from 'react-native-vector-icons/MaterialIcons';
{{#if UnderlyingType.IsReferenceData}}
import { UserConsumer, isAdmin } from '../../../api-authorization/UserContext';
{{/if}}

interface {{cs_name Name}}ListProps {
{{#if HasOperations}}
    data?: {{cs_name Name}}[] | null;
    dataProvided?: boolean | null;
{{else}}
    data: {{cs_name Name}}[] | null;
{{/if}}
    hideAddButton?: boolean | null;
    linkedType?: string | null;
    linkedId?: number | string | null;
    api?: {{UnderlyingType.ClientApiInterfaceName}} | null;
    onHeaderClick?: (fieldName: string) => void;
    noItemsMessage?: string;
}

export const {{cs_name Name}}ListScreen = (props: {{cs_name Name}}ListProps): JSX.Element => {

    function getKey() {
        let key : any[] = [];
        key = key.concat({{cs_name UnderlyingType.Name}}ApiClientQueryKeys.{{cml_case PrimaryOperation.BareName}}());
        return key.concat([props.dataProvided, props.data]);
    }

    const api : {{UnderlyingType.ClientApiInterfaceName}} = props.api ?? new {{UnderlyingType.ClientApiTypeName}}();
    const rendering: {{cs_name Name}}ListRendering = new {{cs_name Name}}ListRendering();
    const query = useQuery({queryKey: getKey(), staleTime: defaultCacheDuration, queryFn: selectData });

    // TODO snackbar
    const navigate = useNavigation();
    const theme = useTheme();

    {{has UnderlyingType.AddOperations}}
    useEffect(() => {
        navigate.setOptions({
            headerRight: () => (
                props.hideAddButton ? null : <Icon name="add" size={IconSize} style={ {color: theme.colors.secondary} } onPress={onAddClick} />
            ),
        }); 
    }, [navigate, theme.colors.secondary, props.hideAddButton]);
    {{/has}}

    {{#if HasMultipleKeys}}
    function makeKey(item: {{cs_name Name}}) : string {
        return "" {{#each KeyFields}}+ item.{{cml_case Name}} + "_" {{/each}};
    }      

    {{/if}}
    return render();

    function render{{cs_name Name}}List() {
		return (
            <FlatList
                data={query.data}
                renderItem={({item}) => <{{cs_name Name}}ListItem item={item} />}
                keyExtractor={a => a.id.toString()}
                refreshing={query.isRefetching}
                onRefresh={query.refetch}
            />
        );
    }

{{has UnderlyingType.AddOperations}}
    function onAddClick(){
        // navigate('/{{kb_case UnderlyingType.Name}}/add', {replace: false, state:{linkedType: props.linkedType, linkedId: props.linkedId}});
        Alert.alert('add clicked');
    }
{{/has}}


	function render() {
		var contents = null;
        if (query.error) {
            contents = renderError();
        } else {
            if (query.isFetching && !query.isRefetching) {
                contents = <ActivityIndicator size={'large'} />;
            } else {
				contents = query.data && query.data.length > 0 ? renderData() : null;
			}
        }

        return (
            <View> 
                { renderDescription() }
                {contents}
            </View>
        );
    }


    function renderError() {
        const customError = rendering.renderCustomError(query.error);
        return customError ? customError : <Error message={query?.error?.message} />;
    }

    function renderData() {
        const customData = rendering.renderCustomData(query);
        return customData ? customData : render{{cs_name Name}}List();
    }

    function renderDescription() {
        const noItemsMessage = props.noItemsMessage ?? 'There are no {{UnderlyingType.HumanizedNamePlural}}';
        const customDescription = rendering.renderCustomDescription(query);
        return customDescription
            ? customDescription
            : ((query.data && query.data.length > 0) || query.isFetching ? null : <Information title="No Items" message={noItemsMessage} />);
    }

    async function selectData() : Promise<{{{ListStateTypeName}}}> {
        if (props.dataProvided){
            return props.data ?? [];
        } else {
            {{#if HasOperations}}
            return await api.{{cml_case PrimaryOperation.BareName}}();
            // return await queryCall(api.{{cml_case PrimaryOperation.BareName}}(), {errorText: 'Error fetching {{UnderlyingType.HumanizedNamePlural}}'}, enqueueSnackbar);
            {{else}}
            return [];    
            {{/if}}    
        }
    }
}