// generated by a tool
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, View, Text } from 'react-native';
import { {{cs_name DetailType.Name}} } from './{{cs_name DetailType.Name}}';
import { {{ClientApiTypeName}}, {{ClientApiInterfaceName}}, {{cs_name Name}}ApiClientQueryKeys } from './{{cml_case Name}}ApiClient';
import { {{cs_name Name}}DetailDisplay } from './{{ts_file_name Name}}DetailDisplay';
import Error from "../../controls/Error";
import DateTimeDisplay from '../../controls/DateTimeDisplay';
import Thumbnail from '../../controls/thumbnail';
import {defaultCacheDuration, queryCall} from "../../api";
import {useQuery} from "@tanstack/react-query";
import {useToast} from "react-native-toast-notifications";
import {NativeStackScreenProps} from '@react-navigation/native-stack';
import {AppStackParamList} from '../../StackNav';
import Title from '../../controls/Title';
{{#each RelatedDetails}}
import { {{ClientApiTypeName}}, {{ClientApiInterfaceName}}, {{cs_name Name}}ApiClientQueryKeys } from '../{{kb_case Name}}/{{cml_case Name}}ApiClient';
import { {{cs_name SelectAllType.Name}} } from '../{{kb_case Name}}/{{cs_name SelectAllType.Name}}';
{{#if Paged}}
import { {{cs_name SelectAllType.Name}}ListPaged } from '../{{kb_case Name}}/list/{{cml_case SelectAllType.Name}}ListPaged';
{{else}}
import { {{cs_name SelectAllType.Name}}List } from '../{{kb_case Name}}/list/{{cml_case SelectAllType.Name}}List';
{{/if}}
{{/each}}

type {{cs_name Name}}DetailProps = NativeStackScreenProps<AppStackParamList, '{{cml_case Name}}Detail'>;

export const {{cs_name Name}}DetailScreen = (props: {{cs_name Name}}DetailProps) : React.ReactElement =>  {
    const itemId = props.route.params.{{cml_case IdentityField.Name}}; // TODO - handle multiple keys

    const api : {{ClientApiInterfaceName}} = new {{ClientApiTypeName}}();
	{{#each RelatedDetails}}
    const {{cml_case Name}}Api : {{ClientApiInterfaceName}} = props.{{cml_case Name}}Api ?? new {{ClientApiTypeName}}();
	{{/each}}

    const toast = useToast();
    const {{cml_case Name}}Query = useQuery<{{cs_name DetailType.Name}}>({queryKey: {{cs_name Name}}ApiClientQueryKeys.selectForDisplayById(itemId), 
                                             staleTime: defaultCacheDuration, 
                                             queryFn: async () => queryCall(api.selectForDisplayById(itemId), {errorText: 'Error fetching {{HumanizedName}}'}, toast.show),
                                    });
    {{#each DirectlyRelatedDetails}}
    const {{cml_case Name}}Query = useQuery<{{cs_name SelectAllType.Name}}[]>({queryKey: {{cs_name Name}}ApiClientQueryKeys.selectForDisplayBy{{cs_name LinkingFieldBareName}}(itemId), staleTime: defaultCacheDuration, queryFn: async () => queryCall({{cml_case Name}}Api.selectForDisplayBy{{cs_name LinkingFieldBareName}}(itemId), {errorText: 'Error fetching {{HumanizedName}}'}, toast.show ) });
    {{/each}}
    {{#each LinkedDetails}}
    const {{cml_case Name}}Query = useQuery<{{cs_name SelectAllType.Name}}[]>({queryKey: {{cs_name Name}}ApiClientQueryKeys.selectVia{{cs_name ../Name}}Id(itemId), staleTime: defaultCacheDuration, queryFn: async () => queryCall({{cml_case Name}}Api.selectVia{{cs_name ../Name}}Id(itemId), {errorText: 'Error fetching {{HumanizedName}}'}, toast.show) });
    {{/each}}

    {{#each UpdateOperations}}
        {{#if GenerateUI}}
    const on{{cs_name Name}}Click = () => {
        // TODO - nav to operation
        // navigate('/{{kb_case ../Name}}/{{kb_case FriendlyName}}/' + {{cml_case ../Name}}Query.data?.id, {replace: false, state:{data: {{cml_case ../Name}}Query.data} });
    }

        {{/if}}
    {{/each}} 
    
    const render{{cs_name Name}}Detail = (data: {{cs_name DetailType.Name}}):React.ReactElement => {
        return (
            <{{cs_name Name}}DetailDisplay item={data} />
        );
    }

	let contents = null;
    if ({{cml_case Name}}Query.error) {
        contents = <Error message={ {{cml_case Name}}Query.error.message ? {{cml_case Name}}Query.error.message : "unable to load {{hmn Name}}"} />;
    } else {
        if ({{cml_case Name}}Query.data) {
            contents = render{{cs_name Name}}Detail({{cml_case Name}}Query.data);
        }
        else {
            contents = <ActivityIndicator />;
        }
    }

    {{#each RelatedDetails}}
        {{#if Paged}}
    const {{cml_case Name}}Contents = {{cml_case ../Name}}Query.data ? <{{cs_name SelectAllType.Name}}ListPaged filterBy='{{LinkingFieldName}}' {{cml_case LinkingFieldName}}={ {{cml_case ../Name}}Query.data.id } /> : null ;
        {{else}}
    let {{cml_case Name}}Contents = null;
    if ({{cml_case Name}}Query.error) {
        {{cml_case Name}}Contents = <Error message={"unable to load {{hmn Name}}."} />;
    } else {
        if ({{cml_case Name}}Query.isFetching){
            {{cml_case Name}}Contents = <ActivityIndicator />;			
        }
        else {
            {{cml_case Name}}Contents = <{{cs_name SelectAllType.Name}}List data={ {{cml_case Name}}Query.data } dataProvided={true} linkedType='{{../Name}}' linkedId={ {{cml_case ../Name}}Query.data ? {{cml_case ../Name}}Query.data.id : null} />;		
        }
    }
        {{/if}}
    {{/each}}

    if ({{cml_case Name}}Query.data) {
        return (
        <View style={ {flex: 1} }>
            {{#if DisplayField}}
            <Title>{ {{cml_case Name}}Query.data.{{cml_case DisplayField.Name}} }</Title>
            {{else}}
            <Title>{{HumanizedName}} { {{cml_case Name}}Query.data.{{cml_case IdentityField.Name}} }</Title>
            {{/if}}
            <Text>{{HumanizedName}} Details</Text>
            {contents}
            {{#each RelatedDetails}}
            <View className="related-detail">
            { {{cml_case Name}}Contents }
            </View>
            {{/each}}
        </View>
        );
    }
    else {
        return (
        <View style={ {flex: 1} }>
            <Title>{{HumanizedName}}</Title>
            {contents}
            {{#each RelatedDetails}}
            <View style={ {flex: 1} }>
            { {{cml_case Name}}Contents }
            </View>
            {{/each}}
        </View>			
        );
    }
}
