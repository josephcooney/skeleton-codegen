// generated by a tool
import React, { Component } from 'react';
import {Autocomplete, TextField} from '@mui/material';
import { {{cs_name SelectAllType.Name}} } from './{{cs_name SelectAllType.Name}}';
import { {{ClientApiTypeName}}, {{ClientApiInterfaceName}} } from './{{cml_case Name}}ApiClient';

interface {{cs_name Name}}SelectState {
    data: {{cs_name SelectAllType.Name}}[];
	value: {{get_ts_type IdentityField.ClrType}} | null; 
	loading: boolean;
	error: boolean;
}

interface {{cs_name Name}}SelectProps {
    value : {{get_ts_type IdentityField.ClrType}} | null;
    readonly: boolean;
    onChange(value: {{get_ts_type IdentityField.ClrType}} | null) : void;
    field?: any;
    error?: boolean;
    className: string;
    api?: {{ClientApiInterfaceName}} | null;
    label?: string;
}

export class {{cs_name Name}}Select extends Component<{{cs_name Name}}SelectProps, {{cs_name Name}}SelectState> {
    private api : {{ClientApiInterfaceName}} = this.props.api ? this.props.api : new {{ClientApiTypeName}}();

    constructor(props: {{cs_name Name}}SelectProps ) {
        super(props);
        this.state = { data: [], value: props.value, loading: true, error: false};
		this.handleChange = this.handleChange.bind(this);
        this.onBlur = this.onBlur.bind(this);
    }

    componentDidMount() {
        this.getSelectData();
    }

    componentDidUpdate(prevProps: Readonly<{{cs_name Name}}SelectProps>, prevState: Readonly<{{cs_name Name}}SelectState>, snapshot?: any) {
        if (prevProps.value != this.props.value) {
            this.setState({value: this.props.value});
        }
    }

    handleChange(event : React.SyntheticEvent, item: any) {
        this.setState({error: this.state.error, data: this.state.data, value: item?.value, loading: this.state.loading });
		if (this.props.onChange) {
			this.props.onChange(item?.value);		
        }
        this.props.field?.onChange({target: { value: item?.value, name: this.props.field.name }});
    }

	handleInputChange(inputText: string) {
        // TODO - "searching large lists version will do things here"
    }

    onBlur(){
        this.props.field?.onBlur({target: { value: this.state.value, name: this.props.field.name }});
    }
    
    render{{cs_name Name}}Select(data: {{cs_name SelectAllType.Name}}[]) {

        {{#if HasDisplayField}}
		const options = data.map(d => ({ value: d.id, label: d.{{cml_case DisplayField.Name}} }));
		{{else}}
		const options = data.map(d => ({ value: d.id, label: {{#each LinkingFields}}d.{{cml_case Name}}{{#unless @last}} + " - " + {{/unless}}{{/each}} }));
		{{/if}}
        const selected = options.find(o => o.value === this.state.value) ?? null;
		
		return (
        <Autocomplete options={options} value={selected} onChange={this.handleChange} renderInput={(params) => <TextField {...params} label={this.props.label} onBlur={this.onBlur} error={this.props.error} />} disabled={this.props.readonly} />
        );
    }

    render() {
		var contents = null;
        if (this.state.error) {
            contents = <span>Error</span>
        } else {
            contents = this.state.loading
            ? <span><em>Loading...</em></span>
            : this.render{{cs_name Name}}Select(this.state.data);
        }

        return ( <div>{contents}</div> );
    }

    async getSelectData() {
        await this.api.selectAllForDisplay().then(data => {
            var responseBody = data.parsedBody;
            if (responseBody) {
                this.setState({ data: responseBody, loading: false });
            } else {
                this.setState({ loading: false }); 
            }
        }).catch(err => {
            this.setState({ data: [], loading: false, error: true });
        });
    }
}
