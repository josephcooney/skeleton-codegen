// generated by a tool
import React, { useEffect, useState } from 'react';
import {Autocomplete, TextField} from '@mui/material';
import { {{cs_name SelectAllType.Name}} } from './{{cs_name SelectAllType.Name}}';
import { {{ClientApiTypeName}}, {{ClientApiInterfaceName}} } from './{{cml_case Name}}ApiClient';

interface {{cs_name Name}}SelectState {
    data: {{cs_name SelectAllType.Name}}[];
	value: {{get_ts_type IdentityField.ClrType}} | null; 
	loading: boolean;
	error: boolean;
}

interface {{cs_name Name}}SelectProps {
    value : {{get_ts_type IdentityField.ClrType}} | null;
    readonly: boolean;
    onChange(value: {{get_ts_type IdentityField.ClrType}} | null, item: {{cs_name SelectAllType.Name}} | null) : void;
    field?: any;
    error?: boolean;
    api?: {{ClientApiInterfaceName}} | null;
    label?: string;
}

export const {{cs_name Name}}Select = (props: {{cs_name Name}}SelectProps) => {
    const api : {{ClientApiInterfaceName}} = props.api ?? new {{ClientApiTypeName}}();
    const [selectState, setSelectState] = useState<{{cs_name Name}}SelectState>({ data: [], value: props.value, loading: true, error: false});

    useEffect(() => {
        getSelectData(); // replace with react query
    }, []);
    
    useEffect(() => {
        setSelectState((prevState: {{cs_name Name}}SelectState) => ({ ...prevState, value: props.value }));
    }, [props.value]);
    
    const handleChange = (event : React.SyntheticEvent, item: any) => {
        setSelectState((prevState: {{cs_name Name}}SelectState) => ({ ...prevState, value: item?.value }));
		if (props.onChange) {
			props.onChange(item?.value, item?.data);		
        }
        props.field?.onChange({target: { value: item?.value, name: props.field.name }});
    }

	const handleInputChange = (inputText: string) => {
        // TODO - "searching large lists version will do things here"
    }

    const onBlur = () => {
        props.field?.onBlur({target: { value: selectState.value, name: props.field.name }});
    }
    
    const render{{cs_name Name}}Select = (data: {{cs_name SelectAllType.Name}}[]) => {

        {{#if HasDisplayField}}
		const options = data.map(d => ({ value: d.id, label: d.{{cml_case DisplayField.Name}}, data: d }));
		{{else}}
		const options = data.map(d => ({ value: d.id, label: {{#each LinkingFields}}d.{{cml_case Name}}{{#unless @last}} + " - " + {{/unless}}{{/each}}, data: d }));
		{{/if}}
        const selected = options.find(o => o.value === selectState.value) ?? null;
		
		return (
            <Autocomplete options={options} value={selected} onChange={handleChange} renderInput={(params) => <TextField {...params} label={props.label} onBlur={onBlur} error={props.error} />} disabled={props.readonly} />
        );
    }

    const render = () => {
		var contents = null;
        if (selectState.error) {
            contents = <span>Error</span>
        } else {
            contents = selectState.loading
            ? <span><em>Loading...</em></span>
            : render{{cs_name Name}}Select(selectState.data);
        }

        return ( <div>{contents}</div> );
    }

    function getSelectData() {
        api.selectAllForDisplay().then(data => {
            if (data) {
                setSelectState((prevState: {{cs_name Name}}SelectState) => ({ ...prevState, data: data, loading: false }));
            } else {
                setSelectState((prevState: {{cs_name Name}}SelectState) => ({ ...prevState, loading: false }));
            }
        }).catch(err => {
            setSelectState((prevState: {{cs_name Name}}SelectState) => ({ ...prevState, data: [], loading: false, error: true }));                
        });
    }
    
    return render();
}
