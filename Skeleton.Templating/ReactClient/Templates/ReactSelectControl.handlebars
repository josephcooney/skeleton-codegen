// generated by a tool
import React, { useEffect, useState } from 'react';
import {Autocomplete, TextField} from '@mui/material';
import { {{cs_name SelectAllType.Name}} } from './{{cs_name SelectAllType.Name}}';
import { {{ClientApiTypeName}}, {{ClientApiInterfaceName}}, {{cs_name Name}}ApiClientQueryKeys } from './{{cml_case Name}}ApiClient';
import {useQuery} from "@tanstack/react-query";
import {defaultCacheDuration, queryCall} from "../../api";

interface {{cs_name Name}}SelectProps {
    value : {{get_ts_type IdentityField.ClrType}} | null;
    readonly: boolean;
    onChange(value: {{get_ts_type IdentityField.ClrType}} | null, item: {{cs_name SelectAllType.Name}} | null) : void;
    field?: any;
    error?: boolean;
    api?: {{ClientApiInterfaceName}} | null;
    label?: string;
}

export const {{cs_name Name}}Select = (props: {{cs_name Name}}SelectProps) => {
    const api : {{ClientApiInterfaceName}} = props.api ?? new {{ClientApiTypeName}}();
    const [selectedValue, setSelectedValue] = useState<{{get_ts_type IdentityField.ClrType}} | null>(props.value);
    const selectQuery = useQuery<{{cs_name SelectAllType.Name}}[]>({queryKey: {{cs_name Name}}ApiClientQueryKeys.selectAllForDisplay(),
        staleTime: defaultCacheDuration,
        queryFn: async () => await api.selectAllForDisplay(),
    });
    
    useEffect(() => {
        setSelectedValue(props.value);
    }, [props.value]);
    
    const handleChange = (event : React.SyntheticEvent, item: any) => {
        setSelectedValue(item?.value);
		if (props.onChange) {
			props.onChange(item?.value, item?.data);		
        }
        props.field?.onChange({target: { value: item?.value, name: props.field.name }});
    }

	const handleInputChange = (inputText: string) => {
        // TODO - "searching large lists version will do things here"
    }

    const onBlur = () => {
        props.field?.onBlur({target: { value: selectedValue, name: props.field.name }});
    }
    
    const render{{cs_name Name}}Select = (data: {{cs_name SelectAllType.Name}}[]) => {

        {{#if HasDisplayField}}
		const options = data.map(d => ({ value: d.id, label: d.{{cml_case DisplayField.Name}}, data: d }));
		{{else}}
		const options = data.map(d => ({ value: d.id, label: {{#each LinkingFields}}d.{{cml_case Name}}{{#unless @last}} + " - " + {{/unless}}{{/each}}, data: d }));
		{{/if}}
        const selected = options.find(o => o.value === selectedValue) ?? null;
		
		return (
            <Autocomplete options={options} value={selected} onChange={handleChange} renderInput={(params) => <TextField {...params} label={props.label} onBlur={onBlur} error={props.error} />} disabled={props.readonly} />
        );
    }

    const render = () => {
		var contents = null;
        if (selectQuery.error) {
            contents = <span>Error</span>
        } else {
            contents = selectQuery.isFetching
            ? <span><em>Loading...</em></span>
            : render{{cs_name Name}}Select(selectQuery.data);
        }

        return ( <div>{contents}</div> );
    }
    
    return render();
}
