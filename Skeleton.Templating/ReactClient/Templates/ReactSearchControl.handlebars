// generated by a tool
import React, { RefObject } from 'react';
import { searchState } from '../../searchState';
import { Search, SearchProps } from '../../searchComponent';
import { {{ReturnTypeName}} } from './{{cs_name ReturnTypeName}}';
import { {{ReturnTypeName}}List } from './list/{{cml_case ReturnTypeName}}List';
import { {{ClientApi.ClientApiTypeName}}, {{ClientApi.ClientApiInterfaceName}} } from './{{cml_case RelatedType.Name}}ApiClient';
import {TextField} from "@mui/material";
import Title from "../../controls/Title";
import {useLocation, useNavigate} from "react-router-dom";

interface {{cs_name Name}}ComponentProps extends SearchProps {
    api?: {{ClientApi.ClientApiInterfaceName}} | null;
}

export const {{cs_name Name}} = (props: {{ClientApi.ClientApiInterfaceName}} | undefined) : JSX.Element => {
    const location = useLocation();
    const nav = useNavigate();
    return <{{cs_name Name}}Component location={location} navigation={nav} api={props}  />
}

class {{cs_name Name}}Component extends Search<{{cs_name Name}}ComponentProps, {{ReturnTypeName}}> {

	private api : {{ClientApi.ClientApiInterfaceName}} = this.props.api ?? new {{ClientApi.ClientApiTypeName}}();
	private input : RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>();

	constructor(props: {{cs_name Name}}ComponentProps) {
        super(props);
		this.setSearchQuery = this.setSearchQuery.bind(this);
    }

	componentDidUpdate(prevProps: {{cs_name Name}}ComponentProps) {
        super.componentDidUpdateBase(prevProps, this.input);
    }

	render() {
		return (
			<div>
				<Title>{{hmn RelatedType}} Search</Title>
				<TextField type='text' className='form-control' onChange={this.setSearchQuery} defaultValue={this.state.searchText ? this.state.searchText : ""} inputRef={this.input} />
				<{{ReturnTypeName}}List data={ this.state.data } hideHeading={true} {...this.props} />
			</div>
		);	
	}

	async performSearch() {
        await this.api.{{cml_case BareName}}(this.state.searchText).then(data => {
            var responseBody = data.parsedBody;
            if (responseBody) {
                this.setState({ data: responseBody, loading: false, error: false, message: null, searchText: this.state.searchText, loadingFromHistory: false } as Pick<searchState<{{ReturnTypeName}}>, keyof searchState<{{ReturnTypeName}}>>);
				this.addSearchHistory();
            } else {
                this.setState({ data:[], loading: false, error: false, message: "no results", searchText: this.state.searchText, loadingFromHistory: false } as Pick<searchState<{{ReturnTypeName}}>, keyof searchState<{{ReturnTypeName}}>>);     
            }
        }).catch(err => {
            this.setState({ data: [], loading: false, error: true, message: err.message });
        });
    }
}