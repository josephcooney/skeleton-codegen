// generated by a tool
import React, { useEffect, useState } from 'react';
import { Grid, Fab, Table, TableBody, TableCell, TableHead, TableRow, Rating, Typography } from "@mui/material";
import {useTheme} from "@mui/material/styles";
import EditIcon from '@mui/icons-material/Edit';
import { Link, useNavigate, useParams } from 'react-router-dom'
import { {{cs_name DetailType.Name}} } from './{{cs_name DetailType.Name}}';
import { {{ClientApiTypeName}}, {{ClientApiInterfaceName}}, {{cs_name Name}}ApiClientQueryKeys } from './{{cml_case Name}}ApiClient';
import { {{cs_name Name}}DetailDisplay } from './{{ts_file_name Name}}DetailDisplay';
import { Loading } from '../../controls/loading';
import { ErrorControl } from '../../controls/error-control';
import DateTimeDisplay from '../../controls/DateTimeDisplay';
import Thumbnail from '../../controls/thumbnail';
import Title from "../../controls/Title";
import {useSnackbar} from "notistack";
import {defaultCacheDuration, queryCall} from "../../api";
import {useQuery} from "@tanstack/react-query";
{{#each RelatedDetails}}
import { {{ClientApiTypeName}}, {{ClientApiInterfaceName}}, {{cs_name Name}}ApiClientQueryKeys } from '../{{kb_case Name}}/{{cml_case Name}}ApiClient';
import { {{cs_name SelectAllType.Name}} } from '../{{kb_case Name}}/{{cs_name SelectAllType.Name}}';
{{#if Paged}}
import { {{cs_name SelectAllType.Name}}ListPaged } from '../{{kb_case Name}}/list/{{cml_case SelectAllType.Name}}ListPaged';
{{else}}
import { {{cs_name SelectAllType.Name}}List } from '../{{kb_case Name}}/list/{{cml_case SelectAllType.Name}}List';
{{/if}}
{{/each}}

interface {{cs_name Name}}DetailProps {
    id?: {{get_ts_type IdentityField.ClrType}};
    api?: {{ClientApiInterfaceName}} | null;
{{#each RelatedDetails}}
    {{cml_case Name}}Api?: {{ClientApiInterfaceName}} | null;
{{/each}}
}

export const {{cs_name Name}}Detail = (props: {{cs_name Name}}DetailProps) : React.ReactElement =>  {
    const {id} = useParams();
    
    function getId() : {{#if IdentityField.IsNumber}}number{{else}}string{{/if}} {
        let idToFetch = props.id;
        if (!idToFetch && id){
        {{#unless HasMultipleKeys}}
            {{#if IdentityField.IsNumber}}
                idToFetch = parseInt(id);
            {{else}}
                idToFetch = id;
            {{/if}}
        {{/unless}}
        }
        return idToFetch ?? {{#if IdentityField.IsNumber}}0{{else}}""{{/if}};
    }
    const [itemId, setItemId] = useState<{{#if IdentityField.IsNumber}}number{{else}}string{{/if}}>(getId());
    const api : {{ClientApiInterfaceName}} = props.api ?? new {{ClientApiTypeName}}();
	{{#each RelatedDetails}}
    const {{cml_case Name}}Api : {{ClientApiInterfaceName}} = props.{{cml_case Name}}Api ?? new {{ClientApiTypeName}}();
	{{/each}}
    
    const { enqueueSnackbar, closeSnackbar } = useSnackbar();
    const {{cml_case Name}}Query = useQuery<{{cs_name DetailType.Name}}>({queryKey: {{cs_name Name}}ApiClientQueryKeys.selectForDisplayById(itemId), 
                                             staleTime: defaultCacheDuration, 
                                             queryFn: async () => queryCall(api.selectForDisplayById(itemId), {errorText: 'Error fetching {{HumanizedName}}'}, enqueueSnackbar),
                                    });
    {{#each DirectlyRelatedDetails}}
    const {{cml_case Name}}Query = useQuery<{{cs_name SelectAllType.Name}}[]>({queryKey: {{cs_name Name}}ApiClientQueryKeys.selectForDisplayBy{{cs_name LinkingFieldBareName}}(itemId), staleTime: defaultCacheDuration, queryFn: async () => queryCall({{cml_case Name}}Api.selectForDisplayBy{{cs_name LinkingFieldBareName}}(itemId), {errorText: 'Error fetching {{HumanizedName}}'}, enqueueSnackbar ) });
    {{/each}}
    {{#each LinkedDetails}}
    const {{cml_case Name}}Query = useQuery<{{cs_name SelectAllType.Name}}[]>({queryKey: {{cs_name Name}}ApiClientQueryKeys.selectVia{{cs_name ../Name}}Id(itemId), staleTime: defaultCacheDuration, queryFn: async () => queryCall({{cml_case Name}}Api.selectVia{{cs_name ../Name}}Id(itemId), {errorText: 'Error fetching {{HumanizedName}}'}, enqueueSnackbar) });
    {{/each}}

    const navigate = useNavigate();
    
    const theme = useTheme();

    {{#each UpdateOperations}}
        {{#if GenerateUI}}
    const on{{cs_name Name}}Click = () => {
        navigate('/{{kb_case ../Name}}/{{kb_case FriendlyName}}/' + {{cml_case ../Name}}Query.data?.id, {replace: false, state:{data: {{cml_case ../Name}}Query.data} });
    }

        {{/if}}
    {{/each}} 

    useEffect(() => {
        setItemId(getId());
    }, [props.id, id])
    
    const render{{cs_name Name}}Detail = (data: {{cs_name DetailType.Name}}):React.ReactElement => {
        return (
            <>
            <{{cs_name Name}}DetailDisplay item={data} />
            <Grid container direction="column" alignItems="flex-end" style={ {paddingTop: theme.spacing(1), paddingBottom: theme.spacing(1)} }>
			{{#each UpdateOperations}}
                {{#if GenerateUI}}
                <Fab size="medium" color="primary" aria-label="{{FriendlyName}} {{../HumanizedName}}" onClick={on{{cs_name Name}}Click}>
                    <EditIcon />
                </Fab>
                {{/if}}
            {{/each}}
            </Grid>
            </>
        );
    }

	let contents = null;
    if ({{cml_case Name}}Query.error) {
        contents = <ErrorControl message={ {{cml_case Name}}Query.error.message ? {{cml_case Name}}Query.error.message : "unable to load {{hmn Name}}"}></ErrorControl>;
    } else {
        if ({{cml_case Name}}Query.data) {
            contents = render{{cs_name Name}}Detail({{cml_case Name}}Query.data);
        }
        else {
            contents = <Loading />;
        }
    }

    {{#each RelatedDetails}}
        {{#if Paged}}
    const {{cml_case Name}}Contents = {{cml_case ../Name}}Query.data ? <{{cs_name SelectAllType.Name}}ListPaged filterBy='{{LinkingFieldName}}' {{cml_case LinkingFieldName}}={ {{cml_case ../Name}}Query.data.id } /> : null ;
        {{else}}
    let {{cml_case Name}}Contents = null;
    if ({{cml_case Name}}Query.error) {
        {{cml_case Name}}Contents = <ErrorControl message={"unable to load {{hmn Name}}."}></ErrorControl>;
    } else {
        if ({{cml_case Name}}Query.isFetching){
            {{cml_case Name}}Contents = <Loading />;			
        }
        else {
            {{cml_case Name}}Contents = <{{cs_name SelectAllType.Name}}List data={ {{cml_case Name}}Query.data } dataProvided={true} linkedType='{{../Name}}' linkedId={ {{cml_case ../Name}}Query.data ? {{cml_case ../Name}}Query.data.id : null} />;		
        }
    }
        {{/if}}
    {{/each}}

    if ({{cml_case Name}}Query.data) {
        return (
        <div style={ {width: '100%'} }>
            {{#if DisplayField}}
            <Title>{ {{cml_case Name}}Query.data.{{cml_case DisplayField.Name}} }</Title>
            {{else}}
            <Title>{{HumanizedName}} { {{cml_case Name}}Query.data.{{cml_case IdentityField.Name}} }</Title>
            {{/if}}
            <p>{{HumanizedName}} Details</p>
            {contents}
            {{#each RelatedDetails}}
            <div className="related-detail">
            { {{cml_case Name}}Contents }
            </div>
            {{/each}}
        </div>
        );
    }
    else {
        return (
        <div style={ {width: '100%'} }>
            <Title>{{HumanizedName}}</Title>
            {contents}
            {{#each RelatedDetails}}
            <div className="related-detail">
            { {{cml_case Name}}Contents }
            </div>
            {{/each}}
        </div>			
        );
    }
}
