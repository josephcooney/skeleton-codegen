// generated by a tool
import { get, post, postForm, del, fixJsonDate, fixNullableJsonDate, IHttpResponse} from '../../http'
{{#each Operations}}
{{#if UsesModel}}
import { {{cs_name Name}}Model } from './{{cs_name Name}}Model'
{{/if}}
{{#each UserProvidedParameters}}
{{#if IsCustomTypeOrCustomArray}}
import { {{ResolvedTypescriptTypeUnderlying}} } from './{{ResolvedTypescriptTypeUnderlying}}'
{{/if}}    
{{/each}}    
{{/each}}
{{#each DistinctOperationReturnTypesRelatedToParent}}
import { {{cs_name Name}} } from './{{cs_name Name}}'
{{/each}}
{{#each DistinctOperationReturnTypesRelatedToOther}}
    import { {{cs_name Item1.Name}} } from '../{{kb_case Item2.Name}}/{{cs_name Item1.Name}}'
{{/each}}

export interface {{ClientApiInterfaceName}} {
{{#each ApiOperations}}
    {{#if HasCustomType}}
        {{cml_case BareName}}(model : {{#if ../IsAttachment}}FormData{{else}}{{cs_name CustomType.Name}} | null{{/if}}) : Promise<IHttpResponse<{{TypeScriptReturn}}>>;
    {{else}}
        {{cml_case BareName}}({{#each UserProvidedParameters}}{{cml_case Name}} : {{ResolvedTypescriptType}} | null {{#unless @last}}, {{/unless}}{{/each}}) : Promise<IHttpResponse<{{TypeScriptReturn}}>>;
    {{/if}}    
    {{/each}}    
}

export class {{ClientApiTypeName}} implements {{ClientApiInterfaceName}} {

	{{#each ApiOperations}}
	{{#if HasCustomType}}
	public async {{cml_case BareName}}(model : {{#if ../IsAttachment}}FormData{{else}}{{cs_name CustomType.Name}} | null{{/if}}) : Promise<IHttpResponse<{{TypeScriptReturn}}>>  {
		var uri = 'api/{{kb_case ../Name}}/{{cs_name BareName}}';
		console.log("calling {{Name}} on " + uri);
		{{#if ../IsAttachment}}
		var result = await postForm<{{TypeScriptReturn}}>(uri, model);
		{{else}}
		var result = await {{ts_fix_http HttpMethod}}<{{TypeScriptReturn}}>(uri, model);
		{{/if}}
		{{#if IsStructuredResult}}
		{{#if ResultHasAnyDateFields}}
		if (result.parsedBody) {
        {{#if SingleResult}}
            let d = result.parsedBody;
        {{else}}
            for (let d of result.parsedBody) {
        {{/if}}
                {{#each SimpleReturnType.Fields}}
                {{#unless IsExcludedFromResults}}
				{{#if IsDateTime}}
				{{#if IsRequired}}
				d.{{cml_case Name}} = fixJsonDate(d.{{cml_case Name}});
				{{else}}
				d.{{cml_case Name}} = fixNullableJsonDate(d.{{cml_case Name}});
				{{/if}}
				{{/if}}
                {{/unless}}
				{{/each}}
            {{#unless SingleResult}} }{{/unless}}
        }
		{{/if}}
		{{/if}}
		return result;
	{{else}}
	public async {{cml_case BareName}}({{#each UserProvidedParameters}}{{cml_case Name}} : {{ResolvedTypescriptType}} | null {{#unless @last}}, {{/unless}}{{/each}}) : Promise<IHttpResponse<{{TypeScriptReturn}}>>  { 
    {{#if ProvideDataByUri}}
        var uri = `api/{{kb_case ../Name}}/{{cs_name BareName}}?{{#each UserProvidedParameters}}{{cml_case Name}}=${({{cml_case Name}})}{{#unless @last}}&{{/unless}}{{/each}}`;
    {{else}}
        var uri = 'api/{{kb_case ../Name}}/{{cs_name BareName}}';
    {{/if}}
		console.log("calling {{Name}} on " + uri);
    {{#if ProvideDataByUri}}
        var result = await {{ts_fix_http HttpMethod}}<{{TypeScriptReturn}}>(uri);
    {{else}}
        var result = await {{ts_fix_http HttpMethod}}<{{TypeScriptReturn}}>(uri, {{#each UserProvidedParameters}}{{cml_case Name}}{{/each}});
    {{/if}}    
		{{#if IsStructuredResult}}
		{{#if ResultHasAnyDateFields}}
		if (result.parsedBody) {
        {{#if SingleResult}}
            let d = result.parsedBody;
        {{else}}
            for (let d of result.parsedBody) {
        {{/if}}
                {{#each SimpleReturnType.Fields}}
                {{#unless IsExcludedFromResults}}
				{{#if IsDateTime}}
				{{#if IsRequired}}
				d.{{cml_case Name}} = fixJsonDate(d.{{cml_case Name}});
				{{else}}
				d.{{cml_case Name}} = fixNullableJsonDate(d.{{cml_case Name}});
				{{/if}}
				{{/if}}
                {{/unless}}
				{{/each}}
            {{#unless SingleResult}} }{{/unless}}
        }
		{{/if}}
		{{/if}}
		return result;
	{{/if}}
	}

	{{/each}} 
}