// generated by a tool
import { TablePagination } from '@mui/material';
import {useEffect, useState} from "react";
import { {{cs_name Name}}List } from './{{cml_case Name}}List';
import { {{cs_name Name}} } from '../{{cs_name Name}}';
import { {{UnderlyingType.ClientApiInterfaceName}}, {{UnderlyingType.ClientApiTypeName}} } from '../{{cml_case UnderlyingType.Name}}ApiClient';

type PageState = {
    pageNumber: number;
    pageSize: number;
    resultCount: number;
}

type {{cs_name Name}}ListPagedProps = {
{{#if HasSecondaryPagingOperations}}
    filterBy?: {{#each SecondaryPagingOperations}}'{{Parameter.Name}}'{{#unless @last}} | {{/unless}}{{/each}};
    {{#each SecondaryPagingOperations}}
    {{cml_case Parameter.Name}}? : {{get_ts_type Parameter.ClrType}}; 
    {{/each}}
{{/if}}
    api? : {{UnderlyingType.ClientApiInterfaceName}};
}

export const {{cs_name Name}}ListPaged = (props: {{cs_name Name}}ListPagedProps) => {
    const [pageState, setPageState] = useState<PageState>({pageNumber: 0, pageSize: 10, resultCount: 1000});
    const [pagedData, setPagedData] = useState<{{cs_name Name}}[]>([]);
    const api : {{UnderlyingType.ClientApiInterfaceName}} = props.api ?? new {{UnderlyingType.ClientApiTypeName}}();
    
    const handleChangePage = (event: unknown, newPage: number) => {
        setPageState(prev => { return {...prev, pageNumber: newPage}});
    };

    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
        setPageState(prev => { return {...prev, pageNumber: 0, pageSize: +event.target.value}});
    };
    
    useEffect(() => {
    {{#if HasSecondaryPagingOperations}}
        if (props.filterBy) {
            switch (props.filterBy) {
            {{#each SecondaryPagingOperations}}
                case '{{Parameter.Name}}': {
                    if (props.{{cml_case Parameter.Name}}) {
                        api.{{cml_case Operation.BareName}}(props.{{cml_case Parameter.Name}}, pageState.pageSize, pageState.pageNumber, "Id", null).then(result => {
                            if (result.parsedBody) {
                                setPagedData(result.parsedBody);
                            }
                        });
                    }
                    break;
                }
            {{/each}}
            }
            return;
        }
    {{/if}}    
        api.{{cml_case PrimaryPagedOperation.BareName}}(pageState.pageSize, pageState.pageNumber, "{{IdentityField.Name}}", null).then(result => {
            if (result.parsedBody){
                setPagedData(result.parsedBody);
            }
        })
    }, [pageState.pageNumber, pageState.pageSize]);
    
    return (
        <>
            <{{cs_name Name}}List data={pagedData} dataProvided={true} />
            <TablePagination
                rowsPerPageOptions={[5, 10, 25]}
                component="div"
                count={pageState.resultCount}
                rowsPerPage={pageState.pageSize}
                page={pageState.pageNumber}
                onPageChange={handleChangePage}
                onRowsPerPageChange={handleChangeRowsPerPage}
            />
        </>
    );
}