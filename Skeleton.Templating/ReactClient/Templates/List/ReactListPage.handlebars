// generated by a tool
import React, { FunctionComponent, useRef, useEffect, useState } from 'react';

// material imports
import { TableHead, TableContainer, TableBody, Table, Fab, Grid } from "@mui/material";
import AddIcon from '@mui/icons-material/Add';
import {useTheme} from "@mui/material/styles";

// other libraries
import { useNavigate } from 'react-router-dom';

import { {{cs_name Name}} } from '../{{cs_name Name}}';
import { {{cs_name Name}}Row } from './{{cml_case Name}}Row';
import { {{cs_name Name}}Header } from './{{cml_case Name}}Header';
import { {{UnderlyingType.ClientApiInterfaceName}}, {{UnderlyingType.ClientApiTypeName}}, {{cs_name UnderlyingType.Name}}ApiClientQueryKeys } from '../{{cml_case UnderlyingType.Name}}ApiClient';
import {defaultCacheDuration} from "../../../api";
import { Loading } from '../../../controls/loading';
import {{cs_name Name}}ListRendering from './{{cml_case Name}}ListRendering';
import Title from "../../../controls/Title";
import {useSnackbar} from "notistack";
import {StyledTable} from "../../../controls/styled-table";
import {useQuery} from "@tanstack/react-query";
import {UseQueryResult} from "@tanstack/react-query/src/types";
import {DefaultError} from "@tanstack/query-core/build/modern/index";
{{#if UnderlyingType.IsReferenceData}}
import { UserConsumer, isAdmin } from '../../../api-authorization/UserContext';
{{/if}}

interface {{cs_name Name}}ListProps {
{{#if HasOperations}}
    data?: {{cs_name Name}}[] | null;
    dataProvided?: boolean | null;
{{else}}
    data: {{cs_name Name}}[] | null;
{{/if}}    
    hideHeading?: boolean | null;
    hideAddButton? : boolean | null;
    linkedType? : string | null;
    linkedId? : number | string | null;
    api? : {{UnderlyingType.ClientApiInterfaceName}} | null;
    onHeaderClick? : (fieldName: string) => void;
    noItemsMessage?: string;
}

export const {{cs_name Name}}List : FunctionComponent<{{cs_name Name}}ListProps> = (props: {{cs_name Name}}ListProps) => {

    const api : {{UnderlyingType.ClientApiInterfaceName}} = props.api ?? new {{UnderlyingType.ClientApiTypeName}}();
    const rendering: {{cs_name Name}}ListRendering = new {{cs_name Name}}ListRendering();
{{#if HasOperations}}
    const query : UseQueryResult<{{{ListStateTypeName}}}, DefaultError> = props.dataProvided ? {isFetching: false, isError: false, data: props.data} : useQuery({queryKey: {{cs_name UnderlyingType.Name}}ApiClientQueryKeys.{{cml_case PrimaryOperation.BareName}}, staleTime: defaultCacheDuration, queryFn: api.{{cml_case PrimaryOperation.BareName}} });
{{else}}
    const query : UseQueryResult<{{{ListStateTypeName}}}, DefaultError> = {isFetching: false, isError: false, data: props.data};
{{/if}}

    const navigate = useNavigate();
    const { enqueueSnackbar } = useSnackbar();
    const theme = useTheme();

    {{#if HasMultipleKeys}}
    function makeKey(item: {{cs_name Name}}) : string {
        return "" {{#each KeyFields}}+ item.{{cml_case Name}} + "_" {{/each}};
    }      

    {{/if}}
    return render();

    function render{{cs_name Name}}Table(data: {{cs_name Name}}[]) {
		return (
                <TableContainer>
                    <StyledTable>
                        <TableHead>
                            <{{cs_name Name}}Header onClick={props.onHeaderClick} />
                        </TableHead>
                        <TableBody>
                            {data.map(s =>
                            {{#if HasMultipleKeys}}
                                <{{cs_name Name}}Row data={s} key={ makeKey(s) } />
                            {{else}}
                                <{{cs_name Name}}Row data={s} key={ s.{{cml_case IdentityField.Name}} } />
                            {{/if}}    
                            )}
                        </TableBody>
                    </StyledTable>
                </TableContainer>    
        );
    }

    function onAddClick(){
        navigate('/{{kb_case UnderlyingType.Name}}/add', {replace: false, state:{linkedType: props.linkedType, linkedId: props.linkedId}});
    }

	function render() {

		var contents = null;
        if (query.error) {
            contents = renderError();
        } else {
            if (query.isFetching) {
                contents = <Loading />;
            } else {
				contents = query.data && query.data.length > 0 ? renderData() : null;
			}
        }

        const buttonRowStyle = {paddingTop: theme.spacing(1), paddingBottom: theme.spacing(1)};

        return (
            <React.Fragment>
                { renderHeading() }                
                { renderDescription() }
                {contents}
                {{has UnderlyingType.AddOperations}}
                {props.hideAddButton ? null :
                    (
                    {{#if UnderlyingType.IsReferenceData}}
                        <UserConsumer>
                            {userProps => {
                            return isAdmin(userProps) ? (<Grid container direction="column" alignItems="flex-end" style={buttonRowStyle}>
                            <Fab onClick={onAddClick} size="medium" color="primary" aria-label="add {{UnderlyingType.HumanizedName}}">
                                <AddIcon />
                            </Fab>
                        </Grid>) : null;} }
                        </UserConsumer>
                    {{else}}
                        <Grid container direction="column" alignItems="flex-end" style={buttonRowStyle}>
                            <Fab onClick={onAddClick} size="medium" color="primary" aria-label="add {{UnderlyingType.HumanizedName}}">
                                <AddIcon />
                            </Fab>
                        </Grid>
                    {{/if}}
                    )
                }
                {{/has}}
            </React.Fragment>
        );
    }

	function renderHeading() {
        if (props.hideHeading) {
            return null;
        }
        const customHeading = rendering.renderCustomHeading(query);
        return customHeading ? customHeading : (<Title>{{UnderlyingType.HumanizedNamePlural}}</Title>);
    }

    function renderError() {
        const customError = rendering.renderCustomError(query);
        return customError ? customError : <p><em>Error</em> : {query?.error?.message}</p>;
    }

    function renderData() {
        const customData = rendering.renderCustomData(query);
        return customData ? customData : render{{cs_name Name}}Table(query.data ?? []);
    }

    function renderDescription() {
        const noItemsMessage = props.noItemsMessage ?? 'There are no {{UnderlyingType.HumanizedNamePlural}}';     
        const customDescription = rendering.renderCustomDescription(query);
        return customDescription
            ? customDescription
            : ((query.data && query.data.length > 0) || query.loading ? null : <Grid container><Grid item xs={12}>{noItemsMessage}</Grid></Grid>);
    }
}