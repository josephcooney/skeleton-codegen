// generated by a tool
import React, { FunctionComponent } from 'react';

// material imports
import {IconButton, Rating, TableCell, TableRow, Tooltip} from "@mui/material";
import VisibilityIcon from '@mui/icons-material/Visibility';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';

// other libraries
import { Link } from 'react-router-dom';

import { {{cs_name Name}} } from '../{{cs_name Name}}';
import Thumbnail from '../../../controls/thumbnail';
import DateTimeDisplay from '../../../controls/DateTimeDisplay';
import { StyledTableRow } from '../../../controls/styled-table-row';
{{#if UnderlyingType.IsReferenceData}}
import { UserConsumer, isAdmin } from '../../../api-authorization/UserContext';
{{/if}}
{{#if HasAnyHtmlFields}}
import {HtmlPreview} from "../../../controls/html-preview";
{{/if}}

interface {{cs_name Name}}RowProps {
    data: {{cs_name Name}};
}

export const {{cs_name Name}}Row : FunctionComponent<{{cs_name Name}}RowProps> = (props: {{cs_name Name}}RowProps) => {

            const s = props.data;
    
            return <StyledTableRow key={s.id}>
                            {{#each ListFields}}
                                {{#if IsLinkingFieldWithDetails}}
                            <TableCell><Link to={ { pathname:'/{{kb_case LinkingField.ReferencesType.Name}}/detail/' + s.{{cml_case LinkingField.Name}} } }> { s.{{cml_case Name}} }</Link></TableCell>
                                {{else}}
							        {{#if IsDateTime}}
							<TableCell><DateTimeDisplay date={s.{{cml_case Name}} } /></TableCell>
							        {{else}}
							            {{#if IsBoolean}}
							<TableCell>{ s.{{cml_case Name}} ? 'Yes' : 'No' }</TableCell>
							            {{else}}
                                            {{#if IsColor}}
							<TableCell><div style={ { width: '18px', height: "18px", border: "black 1px solid", background: s.{{cml_case Name}} } as React.CSSProperties}></div></TableCell>
                                            {{else}}
                                                {{#if IsRating}}
                            <TableCell><Rating value={ s.{{cml_case Name}} } readOnly /></TableCell>
                                                {{else}}
                                                    {{#if IsLinkingFieldToAttachmentWithThumbnail}}
                            <TableCell><Thumbnail id={ s.{{cml_case LinkingField.Name}} } name={ s.{{cml_case Name}} }  entityName="{{kb_case RelatedType.Name}}" /></TableCell>
                                                    {{else}}
                                                        {{#if IsHtml}}
                            <TableCell><HtmlPreview content={s.{{cml_case Name}} } /></TableCell>
                                                        {{else}}
                            <TableCell>{ s.{{cml_case Name}} }</TableCell>
                                                        {{/if}}
                                                    {{/if}}
                                                {{/if}}
                                            {{/if}}
							            {{/if}}
							        {{/if}}
                                {{/if}}
							{{/each}}
                            {{#if UnderlyingType.IsAttachmentWithThumbnail}}
                            <TableCell> <Thumbnail id={s.id} name={ s.{{cml_case DisplayField.Name}} } entityName="{{kb_case UnderlyingType.Name}}" /> </TableCell>
                            {{/if}}
                            <TableCell align="right" sx={ {whiteSpace:"nowrap"} }>
							{{#if UnderlyingType.HasDetails}}
                                <Tooltip title="View">
                                    <IconButton aria-label={'View'}>
                                        <Link to={ {pathname: '/{{kb_case UnderlyingType.Name}}/detail/' + s.id} } state={ {data: s} }>
                                            <VisibilityIcon color={"secondary"} />
                                        </Link>
                                    </IconButton>
                                </Tooltip>
							{{/if}}
							{{#if UnderlyingType.IsReferenceData}}
							{/* reference data */}
							<UserConsumer>
							{props => {
								return isAdmin(props) ? (<Tooltip title="Edit">
                                <IconButton aria-label={'Edit'}>
                                    <Link to={ {pathname: '/{{kb_case UnderlyingType.Name}}/edit/' + s.id} } state={ {data: s} }>
                                        <EditIcon color={"secondary"} />
                                    </Link>
                                </IconButton>
                                </Tooltip>) : null;} }
							</UserConsumer>
							{{#if UnderlyingType.CanDelete}}
							<UserConsumer>
							{props => {
								return isAdmin(props) ? (<Tooltip title="Delete">
                                <IconButton aria-label={'Delete'}>
                                    <Link to={ {pathname: '/{{kb_case UnderlyingType.Name}}/delete/' + s.id} } state={ { data: s } }>
                                        <DeleteIcon color={"error"} />
                                    </Link>
                                </IconButton>
                            </Tooltip>) : null; } }
							</UserConsumer>
							{{/if}}
							{{else}}
							{/* non-reference data */}
                                <Tooltip title="Edit">
                                    <IconButton aria-label={'Edit'}>
                                    <Link to={ {pathname: '/{{kb_case UnderlyingType.Name}}/edit/' + s.id} } state={ {data: s} }>
                                        <EditIcon color={"secondary"} />
                                    </Link>
                                    </IconButton>
                                </Tooltip>
                                {{#if UnderlyingType.CanDelete}}
                                <Tooltip title="Delete">
                                    <IconButton aria-label={'Delete'}>
                                        <Link to={ {pathname: '/{{kb_case UnderlyingType.Name}}/delete/' + s.id} } state={ {data: s} }>
                                            <DeleteIcon color={"error"} />    
                                        </Link>
                                    </IconButton>
                                </Tooltip>
							{{/if}}
							{{/if}}
                            </TableCell>
                        </StyledTableRow>;
}