// generated by a tool
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using {{cs_name Namespace}}.Data.Domain;
using {{cs_name Namespace}}.Data.Repository;
using {{cs_name Namespace}}.Models;
using {{cs_name Namespace}}.Services;
{{#if HasCustomResultType}}
using {{cs_name Namespace}}.Data.Model; 
{{/if}}

namespace {{cs_name Namespace}}.Controllers
{
	[Route("api/{{kb_case Name}}")]
    public partial class {{cs_name Name}}ApiController : {{{ControllerBaseClassName}}}
    {
        private readonly I{{cs_name Name}}Repository _repository;
        private readonly IUserService _userService;

		{{#if GenerateConstructor}}
        public {{cs_name Name}}ApiController(I{{cs_name Name}}Repository repository, IUserService userService)
        {
            _repository = repository;
            _userService = userService;
        }

		{{/if}}
        {{#each Operations}}
        {{#unless AllowAnon}}{{#if RequireAdmin}}[Authorize(Roles="{{SecurityRoles.Admin}}")]{{else}}[Authorize]{{/if}}{{/unless}}
		{{#if UsesModel}}
		[Http{{HttpMethod}}("[action]")]
        [ProducesResponseType(typeof({{{Returns}}}), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        {{#if CanCheckForResult}}
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        {{/if}}
		public async Task<ActionResult> {{cs_name BareName}}([FromBody]{{cs_name Name}}Model model, CancellationToken token)
		{
			var requestUserId = _userService.GetUserId(HttpContext);
			{{#if ApiHooks}}
			var beforeResult = await Before{{cs_name BareName}}(requestUserId, model);
            if (beforeResult != null)
			{
                return beforeResult;    
            }    
			{{/if}}
            try 
            {
			    {{#unless NoResult}}var {{cml_case BareName}}Result = {{/unless}}await _repository.{{cs_name BareName}}Async({{#each Parameters}}{{#if IsCurrentUser}}{{#if IsNullable}}requestUserId{{else}}requestUserId.Value{{/if}}{{else}}model.{{cs_name Name}}{{/if}}, {{/each}} token);
			{{#if ApiHooks}}				
			    return await After{{cs_name BareName}}(requestUserId, {{#unless NoResult}}{{cml_case BareName}}Result, {{/unless}} model);
            {{else}}
                {{#if NoResult}}
                return Ok();
                {{else}}
                    {{#if CanCheckForResult}}
                        {{#if CanCheckForResultByCount}}
                if ({{cml_case BareName}}Result == 0)
                {
                    return NotFound();
                }
                        {{/if}}
                        {{#if CanCheckForResultByPresenceOfData}}
                if ({{cml_case BareName}}Result == null)
                {
                    return NotFound();
                }
                        {{/if}}
                        {{#if CanCheckForResultByPresenceOrLengthOfData}}
                if ({{cml_case BareName}}Result == null || {{cml_case BareName}}Result.Count == 0)
                {
                    return NotFound();
                }
                        {{/if}}
                return Ok({{cml_case BareName}}Result);
                    {{else}}
                return Ok({{cml_case BareName}}Result);
                    {{/if}}
                {{/if}}
            {{/if}}
            }
            catch (DataException ex)
            {
                return TranslateExceptionToResult(ex);
            }
		}
		{{else}}
		[Http{{HttpMethod}}("[action]")]
        [ProducesResponseType(typeof({{{Returns}}}), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        {{#if CanCheckForResult}}
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        {{/if}}    
		public async Task<ActionResult> {{cs_name BareName}}({{#each UserProvidedParameters}}{{#unless ../ProvideDataByUri}}[FromBody]{{/unless}}{{{ResolvedClrType}}} {{cml_case Name}}, {{/each}} CancellationToken token)
		{
			var requestUserId = _userService.GetUserId(HttpContext);
			{{#if ApiHooks}}
			var beforeResult = await Before{{cs_name BareName}}(requestUserId{{#each UserProvidedParameters}}, {{cml_case Name}}{{/each}});
            if (beforeResult != null)
            {
                return beforeResult;    
            }    
			
			{{/if}}
            try
            {
                {{#unless NoResult}}var {{cml_case BareName}}Result = {{/unless}}await _repository.{{cs_name BareName}}Async({{#each Parameters}}{{#if ../ChangesOrCreatesData}}{{#if IsCurrentUser}}{{#if IsNullable}}requestUserId{{else}}requestUserId.Value{{/if}}{{else}}{{cml_case Name}}{{/if}}{{else}}{{#if IsSecurityUser}}requestUserId{{else}}{{cml_case Name}}{{/if}}{{/if}}, {{/each}} token);
			{{#if ApiHooks}}				
			    return await After{{cs_name BareName}}(requestUserId, {{#unless NoResult}}{{cml_case BareName}}Result, {{/unless}}{{#each UserProvidedParameters}}{{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}});
            {{else}}
                {{#if NoResult}}
                return Ok();
                {{else}}
                    {{#if CanCheckForResult}}
                        {{#if CanCheckForResultByCount}}
                if ({{cml_case BareName}}Result == 0)
                {
                    return NotFound();
                }                
                        {{/if}}
                        {{#if CanCheckForResultByPresenceOfData}}
                if ({{cml_case BareName}}Result == null)
                {
                    return NotFound();
                }                
                        {{/if}}
                        {{#if CanCheckForResultByPresenceOrLengthOfData}}
                if ({{cml_case BareName}}Result == null || {{cml_case BareName}}Result.Count == 0)
                {
                    return NotFound();
                }                
                        {{/if}}
                return Ok({{cml_case BareName}}Result);
                    {{else}}
                return Ok({{cml_case BareName}}Result);
                    {{/if}}
                {{/if}}
            {{/if}}
            }
            catch (DataException ex)
            {
                return TranslateExceptionToResult(ex);
            }
		}
		{{/if}}

		{{/each}}
    }
}