// generated by a tool
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using {{cs_name Namespace}}.Data.Domain;
using {{cs_name Namespace}}.Data.Repository;
using {{cs_name Namespace}}.Models;
using {{cs_name Namespace}}.Services;
{{#if HasCustomResultType}}
using {{cs_name Namespace}}.Data.Model; 
{{/if}}

namespace {{cs_name Namespace}}.Controllers
{	
	[Route("api/{{kb_case Name}}")]
    public partial class {{cs_name Name}}ApiController : {{{ControllerBaseClassName}}}
    {
        private I{{cs_name Name}}Repository _repository;
        IUserService _userService;
        private readonly IWebHostEnvironment _hostingEnvironment;
        private readonly AttachmentService _attachmentService;

        {{#if GenerateConstructor}}
        public {{cs_name Name}}ApiController(I{{cs_name Name}}Repository repository, IUserService userService, IWebHostEnvironment hostingEnvironment, AttachmentService attachmentService)
        {
            _repository = repository;
            _userService = userService;
            _hostingEnvironment = hostingEnvironment;
            _attachmentService = attachmentService;
        }
        {{/if}}        

        {{#if AllowAnonGet}}[AllowAnonymous]{{else}}[Authorize]{{/if}}
		[HttpGet("{id}")]
        [ProducesResponseType(typeof(FileResult), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        [Produces("application/octet-stream")]
        public async Task<IActionResult> Get({{format_clr_type IdentityField.ClrType}} id, CancellationToken token)
        {
			var userId = _userService.GetUserId(HttpContext.User);
            var item = await _repository.SelectByIdAsync(id, userId, token);
            if (item != null)
            {
                return File(item.{{cs_name AttachmentFileField.Name}}, item.{{cs_name AttachmentFieldContentType.Name}});
            }

            return new NotFoundResult();
        }

        {{#if HasThumbnail}}
        {{#if AllowAnonGet}}[AllowAnonymous]{{else}}[Authorize]{{/if}}
        [HttpGet("[action]")]
        [ProducesResponseType(typeof(FileResult), (int)HttpStatusCode.OK)] 
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        [Produces("application/octet-stream")]
        public async Task<IActionResult> Thumbnail({{format_clr_type IdentityField.ClrType}} id, CancellationToken token)
        {
            var userId = _userService.GetUserId(HttpContext.User);
            var item = await _repository.SelectByIdAsync(id, userId, token);
            if (item != null)
            {
                if (item.Thumbnail != null)
                {
                    return File(item.Thumbnail, item.{{cs_name AttachmentFieldContentType.Name}});
                }
                else
                {
                    return _attachmentService.GetThumbnail(item.{{cs_name AttachmentFileField.Name}}, item.{{cs_name AttachmentFieldContentType.Name}}, _hostingEnvironment);
                }
			}

            return new NotFoundResult();
        }
        {{/if}}

        {{#each Operations}}
        {{#if AllowAnon}}[AllowAnonymous]{{else}}[Authorize]{{/if}}
		{{#if UsesModel}}
		[Http{{HttpMethod}}("[action]")]
		public async {{#if NoResult}}Task{{else}}Task<{{{Returns}}}>{{/if}} {{cs_name BareName}}([FromForm]{{cs_name Name}}Model model, CancellationToken token)
		{
			var userId = _userService.GetUserId(HttpContext.User);
			using (var ms = new MemoryStream())
            {
                await model.{{cs_name ../AttachmentFileField.Name}}.CopyToAsync(ms);
                var contents = ms.ToArray();
				var contentType = model.{{cs_name ../AttachmentFileField.Name}}.ContentType;
				{{#unless NoResult}}return{{/unless}} await _repository.{{cs_name BareName}}Async({{#each Parameters}}{{#if IsCurrentUser}}{{#if IsNullable}}userId{{else}}userId.Value{{/if}}{{else}}{{#if RelatedTypeField.IsAttachmentThumbnail}}_attachmentService.CreateThumbnail(contents, contentType){{else}}{{#if RelatedTypeField.IsFile}}contents{{else}}{{#if RelatedTypeField.IsAttachmentContentType}}contentType{{else}}model.{{cs_name Name}}{{/if}}{{/if}}{{/if}}{{/if}}, {{/each}} token);
            }
		}
		{{else}}
            {{#if ChangesData}}
        [Http{{HttpMethod}}("[action]")]
        [ProducesResponseType(typeof({{{Returns}}}), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public async Task<ActionResult> {{cs_name BareName}}({{#each UserProvidedParameters}}{{#unless ../ProvideDataByUri}}[FromForm]{{/unless}}{{{ApiResolvedClrType}}} {{cml_case Name}}Model, {{/each}} CancellationToken token)
        {
            var userId = _userService.GetUserId(HttpContext.User);
            byte[] content;
            string contentType;   
            {{#each CustomTypeParameters}}
            var {{cml_case Name}} = new {{ResolvedClrType}}();
                {{#each CustomType.Fields}}
                    {{#if RelatedTypeField.IsAttachmentData}}
            using (var ms = new MemoryStream())
            {        
                await {{cml_case ../Name}}Model.{{cs_name Name}}.CopyToAsync(ms);
                content = ms.ToArray();
                {{cml_case ../Name}}.{{cs_name Name}} = content;    
            }        
                    {{else}}
                        {{#if RelatedTypeField.IsAttachmentThumbnail}}
            {{cml_case ../Name}}.{{cs_name Name}} = _attachmentService.CreateThumbnail(content, contentType);
                        {{else}}    
                            {{#if RelatedTypeField.IsAttachmentContentType}}
            contentType = {{cml_case ../Name}}Model.{{cs_name @root.AttachmentFileField.Name}}.ContentType;
            {{cml_case ../Name}}.{{cs_name Name}} = contentType;                                
                            {{else}}
            {{cml_case ../Name}}.{{cs_name Name}} = {{cml_case ../Name}}Model.{{cs_name Name}};
                            {{/if}}    
                        {{/if}}    
                    {{/if}}    
                {{/each}}
            {{/each}}    
            {{#unless NoResult}}var {{cml_case BareName}}Result = {{/unless}}await _repository.{{cs_name BareName}}Async({{#each Parameters}}{{#if IsCurrentUser}}{{#if IsNullable}}userId{{else}}userId.Value{{/if}}{{else}}{{#if RelatedTypeField.IsAttachmentThumbnail}}_attachmentService.CreateThumbnail(contents, contentType){{else}}{{#if RelatedTypeField.IsFile}}contents{{else}}{{#if RelatedTypeField.IsAttachmentContentType}}contentType{{else}}{{cml_case Name}}{{/if}}{{/if}}{{/if}}{{/if}}, {{/each}} token);
            {{#if ApiHooks}}
            return await After{{cs_name BareName}}(userId, {{#unless NoResult}}{{cml_case BareName}}Result, {{/unless}}{{#each UserProvidedParameters}}{{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}});
            {{else}}
                {{#if NoResult}}
            return Ok();
                {{else}}
                    {{#if CanCheckForResult}}
                        {{#if CanCheckForResultByCount}}
            if ({{cml_case BareName}}Result == 0)
            {
                return NotFound();
            }
                        {{/if}}
                        {{#if CanCheckForResultByPresenceOfData}}
            if ({{cml_case BareName}}Result == null)
            {
                return NotFound();
            }
                        {{/if}}
                        {{#if CanCheckForResultByPresenceOrLengthOfData}}
            if ({{cml_case BareName}}Result == null || {{cml_case BareName}}Result.Count == 0)
            {
                return NotFound();
            }
                        {{/if}}
            return Ok({{cml_case BareName}}Result);
                    {{else}}
            return Ok({{cml_case BareName}}Result);
                    {{/if}}
                {{/if}}
            {{/if}}
        }
            {{else}}
	    [Http{{HttpMethod}}("[action]")]
        [ProducesResponseType(typeof({{{Returns}}}), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        {{#if CanCheckForResult}}
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        {{/if}}    
		public async Task<ActionResult> {{cs_name BareName}}({{#each UserProvidedParameters}}{{#unless ../ProvideDataByUri}}[FromBody]{{/unless}}{{{ResolvedClrType}}} {{cml_case Name}}, {{/each}} CancellationToken token)
		{
			var requestUserId = _userService.GetUserId(HttpContext.User);
			{{#if ApiHooks}}
			var beforeResult = await Before{{cs_name BareName}}(requestUserId{{#each UserProvidedParameters}}, {{cml_case Name}}{{/each}});
            if (beforeResult != null)
            {
                return beforeResult;    
            }    
			
			{{/if}}
            try
            {
                {{#unless NoResult}}var {{cml_case BareName}}Result = {{/unless}}await _repository.{{cs_name BareName}}Async({{#each Parameters}}{{#if ../ChangesOrCreatesData}}{{#if IsCurrentUser}}{{#if IsNullable}}requestUserId{{else}}requestUserId.Value{{/if}}{{else}}{{cml_case Name}}{{/if}}{{else}}{{#if IsSecurityUser}}requestUserId{{else}}{{cml_case Name}}{{/if}}{{/if}}, {{/each}} token);
			{{#if ApiHooks}}				
			    return await After{{cs_name BareName}}(requestUserId, {{#unless NoResult}}{{cml_case BareName}}Result, {{/unless}}{{#each UserProvidedParameters}}{{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}});
            {{else}}
                {{#if NoResult}}
                return Ok();
                {{else}}
                    {{#if CanCheckForResult}}
                        {{#if CanCheckForResultByCount}}
                if ({{cml_case BareName}}Result == 0)
                {
                    return NotFound();
                }                
                        {{/if}}
                        {{#if CanCheckForResultByPresenceOfData}}
                if ({{cml_case BareName}}Result == null)
                {
                    return NotFound();
                }                
                        {{/if}}
                        {{#if CanCheckForResultByPresenceOrLengthOfData}}
                if ({{cml_case BareName}}Result == null || {{cml_case BareName}}Result.Count == 0)
                {
                    return NotFound();
                }                
                        {{/if}}
                return Ok({{cml_case BareName}}Result);
                    {{else}}
                return Ok({{cml_case BareName}}Result);
                    {{/if}}
                {{/if}}
            {{/if}}
            }
            catch (DataException ex)
            {
                return TranslateExceptionToResult(ex);
            }
		}
            {{/if}}
		{{/if}}

		{{/each}}
    }
}