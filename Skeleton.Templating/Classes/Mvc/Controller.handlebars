// generated by a tool
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using {{cs_name Namespace}}.Data.Domain;
using {{cs_name Namespace}}.Data.Repository;
using {{cs_name Namespace}}.Models;

namespace {{cs_name Namespace}}.Controllers
{
    public class {{cs_name Name}}Controller : Controller
    {
        private {{cs_name Name}}Repository _repository;
        {{#if HasSecurityPrincipalType}}
        private readonly UserManager<{{cs_name SecurityPrincipalType.Name}}> _userManager;
        {{/if}}
		{{#each UserEditableReferenceFields}}
		private {{cs_name ReferencesType.Name}}Repository _{{cml_case ReferencesType.Name}}Repository;
		{{/each}}

        {{#if HasSecurityPrincipalType}}
        public {{cs_name Name}}Controller({{cs_name Name}}Repository repository, UserManager<{{cs_name SecurityPrincipalType.Name}}> userManager {{#each UserEditableReferenceFields}}, {{cs_name ReferencesType.Name}}Repository {{cml_case ReferencesType.Name}}Repository{{/each}})
        {
            _repository = repository;
            _userManager = userManager;
			{{#each UserEditableReferenceFields}}
			_{{cml_case ReferencesType.Name}}Repository =  {{cml_case ReferencesType.Name}}Repository;
			{{/each}}
        }
        {{else}}
        public {{cs_name Name}}Controller({{cs_name Name}}Repository repository{{#each UserEditableReferenceFields}}, {{cs_name ReferencesType.Name}}Repository {{cml_case ReferencesType.Name}}Repository{{/each}})
        {
            _repository = repository;
			{{#each UserEditableReferenceFields}}
			_{{cml_case ReferencesType.Name}}Repository =  {{cml_case ReferencesType.Name}}Repository;
			{{/each}}
        }
        {{/if}}

        public async Task<IActionResult> Index()
        {
            var model = await _repository.{{cs_name Name}}SelectAllForDisplayAsync();
            return View(model);
        }

        public async Task<IActionResult> Edit({{format_clr_type IdentityField.ClrType}} {{cml_case IdentityField.Name}})
        {
            var models = await _repository.{{cs_name Name}}SelectBy{{cs_name IdentityField.Name}}Async({{cml_case IdentityField.Name}});
            var model = models.FirstOrDefault();
            return View(CreateEditModel(model));
        }

        public IActionResult Add()
        {
            var model = new {{cs_name Name}}();
            return View("Edit", CreateEditModel(model));
        }

        [HttpPost]
        public async Task<IActionResult> Save({{cs_name Name}}EditViewModel editModel)
        {
			var model = editModel.Item;

            // TODO - custom validation? Inject?
            if (!ModelState.IsValid)
            {
                return View("Edit", CreateEditModel(model));
            }

            var userId = int.Parse(HttpContext.User.FindFirstValue(_userManager.Options.ClaimsIdentity.UserIdClaimType));
            if (model.{{cs_name IdentityField.Name}} == default({{format_clr_type IdentityField.ClrType}}))
            {
                await _repository.{{cs_name Name}}InsertAsync({{#each InsertFields}}{{Source}}{{#unless @last}}, {{/unless}}{{/each}});
            }
            else 
            {
                await _repository.{{cs_name Name}}UpdateAsync({{#each UpdateFields}}{{Source}}{{#unless @last}}, {{/unless}}{{/each}});	
            }

            return RedirectToAction("Index");
        }

        {{#if CanDelete}}
        [HttpDelete]
        public IActionResult Delete({{format_clr_type IdentityField.ClrType}} {{cml_case IdentityField.Name}})
        {
            _repository.{{cs_name Name}}Delete({{cml_case IdentityField.Name}});
            return RedirectToAction("Index");
        }
        {{/if}}

		{{#if CanSearch}}
		[HttpGet]
		public async Task<JsonResult> Search(string searchText)
		{
			var data = await _repository.{{cs_name Name}}SearchAsync(searchText);
			return Json(data);
		}
		{{/if}}

        private {{cs_name Name}}EditViewModel CreateEditModel({{cs_name Name}} item)
        {
            var editModel = new {{cs_name Name}}EditViewModel { Item = item };
            {{#each UserEditableReferenceFields}}
			editModel.{{cs_name Name}}Values = _{{cml_case ReferencesType.Name}}Repository.{{cs_name ReferencesType.Name}}SelectAll().Select(r => new RelatedFieldListItem { Id = r.Id, Display = r.{{cs_name ReferencesType.DisplayField.Name}} }).ToList();
			{{/each}}
			return editModel;
        }
    }
}